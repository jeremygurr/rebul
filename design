rebul utilizes simpleton

questions
  how does run know what to run?
    xec handler
  how does a target pull in it's previous target's output?
    need to aggregate output for multi-part targets
  how to include generated source into source folder?
    include out/src-java of any subfolder
  how does test know which driver to run
    xec handler
  how to update libs to new version
    delete artifact
    --update flag?
  what dependencies to package into fat jar?
    need ability to pass things from one target to another
      [ ] simple xec operations
      [ ] way to notate in out folder passthrough
      [*] links from outer layer to inner

each folder may be a target
archetypes in home folder
  rebul-new [{path}] {archetype}
folders
  package
    00-test -> ../../test
    pkg/jar/project
      compile -> ../../compile/out/bytecode/java
    out/artifact/project.jar
  run
    00-compile -> ../../compile
    xec/launchApp
  test
    00-compile -> ../../compile
    src-java
    lib/
    out/report/index.html
  default -> compile
  compile
    00-commonUtils
      fileUtils
        src-java
        out/classes
      dataUtils
        src-java
        out/
      annotations
        src-java
        out/
      out
        fileUtils/classes -> ../../fileUtils/out/classes
        dataUtils/classes -> ../../dataUtils/out/classes
        annotations/classes -> ../../annotations/out/classes
    00-dbTools
      00-generate -> ../../../../generate
      00-lib-classes
      05-xec # don't do this, instead use links
        cp -a 00-generate/out/src-java/* generated-src-java/
      10-generated-src-java/ # combine src-java and use subfolders instead
      15-src-java/
        generated/ -> ../00-generate/out/src-java/generated
        main/
      out/
    05-myCoolGame
      00-dbTools -> ../../dbTools
      00-commonUtils -> ../../commonUtils
      src-java
      lib/
        {repo}:{group}:{artifact}:{version-spec}/jar file, scripts, or checked out repo
        mvn:com.mysql:client:5.4..<6.0
        docker:mysql:...
        github.com:lz4/lz4-java:1.8.0...
        local:{whatever} direct link to folder
      out/classes/...
  generate
    src-bash
    src-go
    src-java
    lib-repo
    out/src-java
minimal example:
  src-java
rebul command
  shell script wraps docker run
  rebul [--cd {path of targets}] [{target...}]
    path defaults to current folder
      first arg is path if it's a folder that exists
    target defaults to build
    -target means skip that target
    if no target specified, builds everything in folder
    won't run same target twice in an execution
    uses out folder to determine if change has happened
      find . -newer out -print -quit
    updates out when target completes successfully
special files:
  .handler/
    override handlers
rebul home ($REBUL_HOME)
  archetypes/
    java-lib.tbz
    java-app.tbz
    go-cli.tbz
    bash-cli.tbz
  bin/
    simpleton-build
    simpleton-load-archetype
    simpleton-save-archetype
  implicit-targets/ (will be searched if target not found)
    clean
      xec
    update
  handlers/ # .{file} is always ignored
    all-others
      for all other folders
    lib-repo
      {url}/
        {version_spec}/
          {fetched artifact}
    lib-maven
    lib-docker
    out
      do nothing?
    pkg-jar
      links to what to include
    pkg-tbz
    src-java
    src-node
    src-golang
    xec (folder or file)
      runs the given shell scripts in this folder

for utils
  REBUL_HOME
  compile
  test
for jerbil
  test
  including other projects
for crawl
  code gen
