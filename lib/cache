#!/bin/bash    # intended to be sourced from other scripts
# provides functions for abstracting simple file caches








type -t cache_to_filename >/dev/null && return 0
cache_to_filename() {
  try

    # should not contain special characters (especially /)
    local cache_name=$1

    if [ ! "$cache_name" ]; then
      err "Must specify cache name as input to cache_to_filename"
      fail
    fi

    result=/var/script-cache
    #mkdir -p $result || fail

    local function_name=cache_to_filename_$cache_name
    if [ "$(type -t $function_name)" == function ]; then
      eval "$function_name" || fail
    else
      result+="/$cache_name"
    fi

  end_try
  handle_return
}

cache_get() {
  try

      local refresh=${refresh:-f}

      local cache_name=$1
      trace "Checking cache $cache_name"

      local result=
      cache_to_filename $cache_name || fail
      local filename=$result

      if [ ! -f "$filename" -o $refresh == t ]; then
        if [ $refresh == t ]; then
          trace "Forcing refresh of cache since refresh=t"
        else
          trace "Cached file $filename doesn't exist, attempting to fetch"
        fi

        local function_name=cache_get_$cache_name

        if [ $(type -t $function_name) != function ]; then
          err "Function $function_name must be defined to generate the missing cache for $cache_name"
          fail
        fi

        eval "$function_name" || fail

        trace "Fetch successful"

      else
        trace "Cached file $filename exists"
      fi

  end_try
  handle_return
}
