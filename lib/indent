#!/bin/bash                        # intended to be sourced from other scripts
# provides functions for indenting output








type -t indent_in >/dev/null && return 0

export indent_level=0

# indents all but the first line of the given var the given margin amount
indent_var() {
  local var=$1; shift
  local margin=$1
  local value=${!var}
  local pad nl=$'\n'

  printf -v pad %${margin}s
  value=${value//\"/\\\"}
  value=${value//\$/\\\$}
  eval "$var=\"${value//$nl/$nl$pad}\""
}

outdent_var() {
  local var=$1; shift
  local value=${!var}
  local new_value=
  local remove_spaces=
  local line_without_space
  local nl=$'\n'

  while IFS= read -r line || [ "$line" ]; do
    if [ ! "$remove_spaces" ]; then
      line_without_space=${line##*( )}
      remove_spaces=$((${#line}-${#line_without_space}))
    fi
    new_value+="${line:$remove_spaces}$nl"
  done < <(echo "$value")

  new_value=${new_value%$nl}
  new_value=${new_value//\"/\\\"}
  new_value=${new_value//\$/\\\$}
  eval "$var=\"$new_value\""
}

indent_in() {
  local count=${1:-1}
  local amount=$((count*2))
  indent_level=$((indent_level+amount))
}

indent_out() {
  local count=${1:-1}
  local amount=$((count*2))
  indent_level=$((indent_level-amount))
}

indent_cat() {
  
  while IFS= read -r line || [ "$line" ]; do

    printf -v pad %${indent_level}s
    echo "$pad$line" 

  done

}

indent_echo() {
  
  shopt -s extglob
  local line OIFS="$IFS" trim=-1 trimmed_line x y out n=0 prev=none

  local lines="$*"
  lines=${lines//:/@COLON@}
  lines=${lines//$'\n'/:}

  IFS=:
  lines=( $lines )
  IFS="$OIFS"

  for line in "${lines[@]}"; do
    line=${line//@COLON@/:}

    let n++ || true
    if [ -z "$line" -a $n -eq 1 ]; then
      continue
    fi

    if [ "$prev" != none ]; then
      echo "$prev"
      prev=none
    fi

    if [ -z "${line%%*( )}" ]; then
      prev=
      continue
    fi

    if [ "$trim" == -1 ]; then
      if [ -n "$line" ]; then
        trimmed_line=${line##*( )}
        x=${#line}
        y=${#trimmed_line}
        trim=$((x-y))
      else
        trimmed_line=
      fi
    else
      trimmed_line=${line:$trim}
    fi

    printf -v pad %${indent_level}s
    out=$pad$trimmed_line 
    echo "${out%%*( )}" 

  done

}

