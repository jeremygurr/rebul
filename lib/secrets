#!/bin/bash                        # intended to be sourced from other scripts
# provides functions for extracting secrets








type -t get_pw >/dev/null && return 0
get_pw() {

  if [ ! -f "../keys/pw.$USER" ]; then
    err "You don't yet have a pw file defined. Execute command ../secure_pw to set your ads password."
    return 1
  fi

  pw=$(../extract_pw)

  if [ ! "$pw" ]; then
    err "Your current password is empty. Use ../secure_pw to set a valid password used to get into services requiring your ads password."
    return 1
  fi

  return 0

}

get_secret() {

  local get_secret_file=$1; shift # File name of secret to read
  local get_secret_var=$1         # var to write secret to
  local get_secret_secret

  if [ ! -f "../keys/key.$USER" ]; then
    err "You don't yet have a key to unlock this secret. Please ask one of these users who have a key to add one for you: $(ls ../keys/key.*)"
    return 1
  fi

  if [ ! -f "../secure_files/$get_secret_file" ]; then
    err "This secret file ../secure_files/$get_secret_file doesn't exist."
    return 1
  fi

  get_secret_secret=$(EDITOR=cat ../secure_edit ../secure_files/$get_secret_file)

  if [ ! "$get_secret_secret" ]; then
    err "This secret file is empty."
    return 1
  fi

  eval "$get_secret_var=\$get_secret_secret"
  return 0

}

