#!/bin/bash         # intended to be sourced from other scripts
# provides functions for processing strings








type -t split_to_array >/dev/null && return 0
split_to_array() {
  local var=$1; shift
  local separator=${1:-$'\n'}

  local OIFS=$IFS
  IFS=$separator
  eval "$var=( \$$var )"

  IFS=$OIFS
}

escape_regex() {
  local var=$1

  eval "$var="'${'"$var"'//\"/\\\"}'
  eval "$var="'${'"$var"'// /\\ }'
  eval "$var="'${'"$var"'//\(/\\\(}'
  eval "$var="'${'"$var"'//)/\\)}'
  eval "$var="'${'"$var"'//\?/\\\?}'
}

# usage: echo " blah   " | trim
trim() {
  tr -d '\n' | sed 's/^[[:space:]]*\(.*\)[[:space:]]*$/\1/'
}

to_lower() {
  tr '[:upper:]' '[:lower:]'
}

to_upper() {
  tr '[:lower:]' '[:upper:]'
}

spaces_to_minus() {
  sed 's/  */-/g'
}

upper_first_char() {
  local string=$1
  local first=${string:0:1}
  first=$(echo -n "$first" | tr '[:lower:]' '[:upper:]')
  echo -n "$first${string:1}"
}

convert_to_seconds() {
  local from=$1; shift
  local to=$1
  case "$from" in
    *s)
      eval "$to=${from%s}"
      ;;
    *m)
      eval "$to=$((${from%m}*60))"
      ;;
    *h)
      eval "$to=$((${from%h}*60*60))"
      ;;
    *d)
      eval "$to=$((${from%d}*24*60*60))"
      ;;
    *w)
      eval "$to=$((${from%w}*7*24*60*60))"
      ;;
    *y)
      eval "$to=$((${from%y}*365*24*60*60))"
      ;;
    *)
      err "Unknown time format, use something like: 4h, 3d, 5m"
      return 1
      ;;
  esac
  return 0
}

