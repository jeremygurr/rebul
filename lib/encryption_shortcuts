# both of these will prompt the user for the encryption password

encrypt() {
openssl enc -aes-256-cbc || return 1
}

decrypt() {
if [ "${1:-}" ]; then
  openssl enc -d -aes-256-cbc -k "$1" || return 1
else
  openssl enc -d -aes-256-cbc || return 1
fi
}

# stdin should be piped through this to decrypt
decrypt_with_private_key() {
set -u # do not allow unset variables to be read
umask 077 # keep others from being able to read temporary files

local current_user_private_key=~/.ssh/id_rsa
local current_user="$USER"
doc_name="$1"

tmp_folder=/tmp/secret_manager
rm -rf $tmp_folder &>/dev/null
mkdir -p $tmp_folder || exit 1

if [ ! -f ../keys/key.$current_user ]; then
  echo "You don't have a key for $doc_name. Ask someone who does to add you. Existing keys:" >&2
  find ../keys -name "key.*"
  exit 1
fi

# extract the master key
openssl pkeyutl -decrypt -inkey $current_user_private_key -in ../keys/key.$current_user -out $tmp_folder/master || {
  echo "Failed to decrypt master key." >&2
  exit 1
}

# decrypt the secret file
openssl enc -aes256 -in $doc_name -out $tmp_folder/$doc_name -d -pass file:$tmp_folder/master || {
  echo "Failed to decrypt secret file." >&2
  exit 1
}

# output the file
cat $tmp_folder/$doc_name || {
  echo "Failed to cat $tmp_folder/$doc_name." >&2
  exit 1
}

rm -rf "$tmp_folder" &>/dev/null
}


